###############################################################################
# RELEASE EXTENSIONS
###############################################################################

name: üöÄüß© Release extensions


###############################################################################
# ON
###############################################################################

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Set number for release version'
        type: string
        required: true

###############################################################################
# JOBS
###############################################################################

jobs:
  release_exts:
    name: üöÄüß© Release extensions
    runs-on: macos-latest
    permissions:
      contents: write
    steps:

      #########################################################################
      # INIT
      #########################################################################

      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: ‚¨áÔ∏èüü¢ Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: ‚¨áÔ∏èü•° Install pnpm
        uses: pnpm/action-setup@v3

      - name: ‚¨áÔ∏èüì¶ Install dependencies
        run: |
          pnpm install --no-frozen-lockfile


      #########################################################################
      # BUILD PKG
      #########################################################################

      - name: üèó Build
        run: pnpm build


      #########################################################################
      # GET PKG INFO
      #########################################################################

      - name: üì¶üìÑ Get package.json data
        id: pkg
        run: |
          echo "description=$(jq -r '.description' ./package.json)" >> $GITHUB_OUTPUT
          echo "name=$(jq -r '.name' ./package.json)" >> $GITHUB_OUTPUT
          echo "version=$(jq -r '.version' ./package.json)" >> $GITHUB_OUTPUT 


      #########################################################################
      # GITHUB RELEASE
      #########################################################################

      - name: üß©üóÇÔ∏è Create Github release
        uses: ncipollo/release-action@v1
        with:
          tag: "${{ steps.pkg.outputs.version }}"
          name: 'v${{ steps.pkg.outputs.version }}'
          draft: false
          prerelease: false
          allowUpdates: true
          artifacts: "dist/exts/*"
          body: |
            # ${{ steps.pkg.outputs.name }} v${{ steps.pkg.outputs.version }}
            ${{ steps.pkg.outputs.description }}
            ---
            üß© CHANGELOG: https://github.com/pigeonposse/wikipediaplus/blob/main/CHANGELOG.md
            üìú LICENSE: https://github.com/pigeonposse/wikipediaplus/blob/main/LICENSE
            üîè PRIVACY: https://pigeonposse.com/privacy 


      #########################################################################
      # FIREFOX
      #########################################################################

      - name: üß©ü¶ä Upload FIREFOX extension
        uses: trmcnvn/firefox-addon@v1
        with:
          # uuid is only necessary when updating an existing addon,
          # omitting it will create a new addon
          uuid: '{a2e191e8-b8eb-490b-b282-9f3d2c0332bf}'
          xpi: dist/comp/firefox-${{ steps.pkg.outputs.name }}-${{ steps.pkg.outputs.version }}.zip
          manifest: dist/firefox/manifest.json
          # get keys in:
          # https://addons.mozilla.org/en-US/developers/addon/api/key/
          api-key: ${{ secrets.FIREFOX_API_KEY }}
          api-secret: ${{ secrets.FIREFOX_API_SECRET }}
        continue-on-error: true


############################################################################### 
